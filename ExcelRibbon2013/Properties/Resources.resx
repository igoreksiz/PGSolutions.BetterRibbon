<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppLaunchButton1_Label" xml:space="preserve">
    <value>Custom Button #1</value>
  </data>
  <data name="AppLaunchButton1_ScreenTip" xml:space="preserve">
    <value>First CustomButton</value>
  </data>
  <data name="AppLaunchButton1_SuperTip" xml:space="preserve">
    <value>First example of a dynamically registered button.</value>
  </data>
  <data name="AppLaunchButton2_Label" xml:space="preserve">
    <value>Second Custom Button</value>
  </data>
  <data name="AppLaunchButton3_Label" xml:space="preserve">
    <value>Third Custom Button</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>PGSolutions Ribbon</value>
  </data>
  <data name="BrandingButton_Label" xml:space="preserve">
    <value>PGSolutions</value>
  </data>
  <data name="BrandingButton_ScreenTip" xml:space="preserve">
    <value>Pretty (Darn) Good Solutions</value>
  </data>
  <data name="BrandingButton_SuperTip" xml:space="preserve">
    <value>Simple robust solutions to complex problems, by Pieter Geerkens

https://github.com/pgeerkens/RibbonDispatcher</value>
  </data>
  <data name="BrandingGroup_Label" xml:space="preserve">
    <value>PGSolutions</value>
  </data>
  <data name="CurrentProjecctButton_Label" xml:space="preserve">
    <value>Current Workbook</value>
  </data>
  <data name="CurrentProjecctButton_ScreenTip" xml:space="preserve">
    <value>Export VBA from Current Workbook</value>
  </data>
  <data name="CurrentProjecctButton_SuperTip" xml:space="preserve">
    <value>Exports all VBA code from the current Excel workbook.</value>
  </data>
  <data name="CustomButtonsGroup_Label" xml:space="preserve">
    <value>Custom Buttons</value>
  </data>
  <data name="ImageOnly_Label" xml:space="preserve">
    <value>Image Only</value>
  </data>
  <data name="ImageOnly_ScreenTip" xml:space="preserve">
    <value>Display Image Only</value>
  </data>
  <data name="ImageOnly_SuperTip" xml:space="preserve">
    <value>Displays just the button image when its size is Regular; else both.</value>
  </data>
  <data name="LabelAndImage_Label" xml:space="preserve">
    <value>Label &amp; Image</value>
  </data>
  <data name="LabelAndImage_ScreenTip" xml:space="preserve">
    <value>Display Label &amp; Image</value>
  </data>
  <data name="LabelAndImage_SuperTip" xml:space="preserve">
    <value>Always displays both the button label and image.</value>
  </data>
  <data name="LabelOnly_Label" xml:space="preserve">
    <value>Label Only</value>
  </data>
  <data name="LabelOnly_ScreenTip" xml:space="preserve">
    <value>Display Label Only</value>
  </data>
  <data name="LabelOnly_SuperTip" xml:space="preserve">
    <value>Displays just the button label when its size is Regular; else both.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="RD_AboutWindow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>RD-AboutWindow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Ribbon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\ribbon.xml;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="SelectedProjectButton_Label" xml:space="preserve">
    <value>Selected Workbooks</value>
  </data>
  <data name="SelectedProjectButton_ScreenTip" xml:space="preserve">
    <value>Export from Selected Workbook(s)</value>
  </data>
  <data name="SelectedProjectButton_SuperTip" xml:space="preserve">
    <value>Exports all VBA code from selected Excel workbook(s).</value>
  </data>
  <data name="SizeToggle_AlternateLabel" xml:space="preserve">
    <value>Prefer Large</value>
  </data>
  <data name="SizeToggle_Label" xml:space="preserve">
    <value>Prefer Small</value>
  </data>
  <data name="SizeToggle_ScreenTip" xml:space="preserve">
    <value>Toggles Button Size</value>
  </data>
  <data name="SizeToggle_SuperTIp" xml:space="preserve">
    <value>Toggles between large and small (preferred size for) buttons for this ribbon group.</value>
  </data>
  <data name="UseSrcFolderToggle_Label" xml:space="preserve">
    <value>Use 'SRC' folder</value>
  </data>
  <data name="UseSrcFolderToggle_ScreenTip" xml:space="preserve">
    <value>Toggles use of folder-name SRC</value>
  </data>
  <data name="UseSrcFolderToggle_SuperTip" xml:space="preserve">
    <value>By default VBAExport is to a directory eponymous with the workbook, suffixed by VBA.

When this toggle is pressed export is instead to a directory 'SRC', and Multi-Select is disabled.</value>
  </data>
  <data name="VbASourceExportGroup_Label" xml:space="preserve">
    <value>VBA Source Code Export</value>
  </data>
  <data name="VbASourceExportGroup_ScreenTip" xml:space="preserve">
    <value>VBA Source Export Controls</value>
  </data>
  <data name="VbASourceExportGroup_SuperTip" xml:space="preserve">
    <value>Exports all VBA code to a sibling direcctory of each workbook, by module type:

Class modules as .CLS
Standard modules as .VBA
MSForm modules as .FRM

Project references as .XML</value>
  </data>
</root>